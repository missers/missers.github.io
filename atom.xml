<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>azraelmiss</title>
  
  <subtitle>欢迎来到我的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://missers.github.io/"/>
  <updated>2017-12-29T14:25:08.718Z</updated>
  <id>http://missers.github.io/</id>
  
  <author>
    <name>azraelmiss</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>三、使用特性、属性和数据</title>
    <link href="http://missers.github.io/2017/12/29/1/"/>
    <id>http://missers.github.io/2017/12/29/1/</id>
    <published>2017-12-29T14:12:47.000Z</published>
    <updated>2017-12-29T14:25:08.718Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h2><p>本节内容：</p><ul><li>获取和设置元素属性    </li><li>使用元素特性    </li><li>在元素上存储自定义数据 </li></ul><h2 id="元素的特性-Property-和属性-Attribute-是什么？"><a href="#元素的特性-Property-和属性-Attribute-是什么？" class="headerlink" title="元素的特性(Property)和属性(Attribute)是什么？"></a>元素的特性(Property)和属性(Attribute)是什么？</h2><p>其实<code>Attribute</code>和<code>Property</code>这两个单词，翻译出来都是“属性”，《js高级程序设计》书中翻译为“特性”和“属性”，以示区别  </p><p>简单理解，<code>Attribute</code>就是<code>dom</code>节点自带的属性，例如html中常用的<code>id</code>、<code>class</code>、<code>title</code>、<code>align</code>等:  </p><p>`</p><p><div id="div1" class="divClass" title="divTitle"><br>`</div></p><p>而<code>Property</code>是这个<code>DOM</code>元素作为对象，其附加的内容，例如<code>childNodes</code>、<code>firstChild</code>等：</p><p><img src="http://ow2gj2hw7.bkt.clouddn.com/17-9-21/59394646.jpg" alt=""></p><p>另外，常用的<code>Attribute</code>，例如<code>id</code>、<code>class</code>、<code>title</code>等，已经被作为<code>Property</code>附加到<code>DOM</code>对象上，可以和<code>Property</code>一样取值和赋值。但是自定义的<code>Attribute</code>，就不会有这样的特殊优待，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span> <span class="attr">class</span>=<span class="string">"divClass"</span> <span class="attr">title</span>=<span class="string">"divTitle"</span> <span class="attr">title1</span>=<span class="string">"divTitle1"</span>&gt;</span>100<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个<code>div</code>里面的<code>title1</code>就不会变成<code>Property</code>。</p><p>即，只要是<code>DOM</code>标签中出现的属性（<code>html</code>代码），都是<code>Attribute</code>。然后有些常用特性（<code>id</code>、<code>class</code>、<code>title</code>等），会被转化为<code>Property</code>。可以很形象的说，这些特性/属性，是“脚踏两只船”的。</p><p><img src="http://ow2gj2hw7.bkt.clouddn.com/17-9-21/12393780.jpg" alt=""></p><p>最后注意：“<code>class</code>”变成<code>Property</code>之后叫做“<code>className</code>”，因为“<code>class</code>”是<code>ECMA</code>的关键字。以下代码等价：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> className = div1.className;</span><br><span class="line"><span class="keyword">var</span> className1 = div1.getAttribute(<span class="string">"class"</span>);</span><br></pre></td></tr></table></figure><h2 id="操作属性"><a href="#操作属性" class="headerlink" title="操作属性"></a>操作属性</h2><ul><li>对属性的操作包括：<font color="red">获取属性值，设置属性值，删除属性</font></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>attr(name)</code></td><td>获取匹配集合中第一个元素的属性值</td></tr><tr><td><code>attr(name, value)</code></td><td>为<code>jQuery</code>对象中的所有属性设置命名的属性和值</td></tr><tr><td><code>attr(attribute)</code></td><td>使用传入的多个属性和值来设置元素的对应属性</td></tr><tr><td><code>removeAttr(name)</code></td><td>删除指定的属性，或者删除所有匹配集合元素的属性</td></tr></tbody></table><h2 id="操作元素特性"><a href="#操作元素特性" class="headerlink" title="操作元素特性"></a>操作元素特性</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>prop(name)</code></td><td>获取匹配集合中的的一个元素的属性值</td></tr><tr><td><code>prop(name, value)</code></td><td>为jQuery集合中的所有元素设置给定命名的属性和值</td></tr><tr><td><code>prop(properties)</code></td><td>通过给定的对象来为匹配集合中的每个元素设置特定的特性和值</td></tr><tr><td><code>removeProp(name)</code></td><td>删除jQuery集合中每个元素的属性</td></tr></tbody></table><h2 id="元素中存储自定义数据"><a href="#元素中存储自定义数据" class="headerlink" title="元素中存储自定义数据"></a>元素中存储自定义数据</h2><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>data(name, value)</code></td><td>使用<code>jQuery</code>方法为集合中的所有元素添加传递的数据</td></tr><tr><td><code>data(object)</code></td><td>为集合中的每个元素添加键-值对对象数据</td></tr><tr><td><code>data([name])</code></td><td>使用指定的名称来查询存储的数据或者HTML5 data-* 属性。如果没有指定名字，则会返回所有存储的数据</td></tr><tr><td><code>removeData()</code></td><td>使用指定的名称删除<code>jQuery</code>对象中所有元素之前存储的数据，参数可以是数组。加空格的名称，没有参数，删除所有</td></tr><tr><td><code>$.hasData(element)</code></td><td>确定元素是否包含相关的数据，参数是要检查的DOM元素</td></tr></tbody></table><ul><li>data()方法不区分驼峰命名法的变量名字的大小写，与虚线和横线连接的名字一样对待</li><li>jQuery也为jQuery对象提供了工具方法，jQuery.data()或者$.data()属于低级别的方法，因为它是一个DOM元素操作，而不是jQuery对象</li><li>用data()方法取值，会有很有趣的事情，与attr()相比，最主要的原因是data()先找xxx数据名，找不到再找data-xxx属性。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.data(<span class="built_in">document</span>.getElementById(<span class="string">'book'</span>), <span class="string">'price'</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本节学习了如何用<code>jQuery</code>操作属性和特性，以及如何在元素中存储数据。更新或者删除特性，数据和属性是非常有用的，接下我们学习如何在页面上操作<code>DOM</code>元素，例如调整位置，添加或者删除元素。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;导语&quot;&gt;&lt;a href=&quot;#导语&quot; class=&quot;headerlink&quot; title=&quot;导语&quot;&gt;&lt;/a&gt;导语&lt;/h2&gt;&lt;p&gt;本节内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取和设置元素属性    &lt;/li&gt;
&lt;li&gt;使用元素特性    &lt;/li&gt;
&lt;li&gt;在元素上存储自定
      
    
    </summary>
    
      <category term="jquery" scheme="http://missers.github.io/categories/jquery/"/>
    
    
      <category term="属性" scheme="http://missers.github.io/tags/%E5%B1%9E%E6%80%A7/"/>
    
      <category term="元素" scheme="http://missers.github.io/tags/%E5%85%83%E7%B4%A0/"/>
    
      <category term="jquery" scheme="http://missers.github.io/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>一、jQuery选择器</title>
    <link href="http://missers.github.io/2017/12/29/1/"/>
    <id>http://missers.github.io/2017/12/29/1/</id>
    <published>2017-12-29T14:12:47.000Z</published>
    <updated>2017-12-29T14:24:57.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h1><h2 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h2><ul><li>导入<code>jQuery</code>库 <code>&lt;script type=&quot;text/javascript&quot; src=&quot;&quot;&gt;&lt;/script&gt;</code>  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         alert(<span class="string">"hello world"</span>)</span><br><span class="line">     &#125;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><ul><li><code>$(function(){})</code>相当于<code>window.onload()</code>  </li><li><code>$(&quot;button&quot;)</code>表示选取<code>button</code>对象，返回的是一个<code>jQuery</code>对象，并且是个数组</li></ul><h2 id="jQuery对象和Dom对象的相互转化"><a href="#jQuery对象和Dom对象的相互转化" class="headerlink" title="jQuery对象和Dom对象的相互转化"></a>jQuery对象和Dom对象的相互转化</h2><ul><li>约定变量前加<code>$</code>，表示是jQuery对象  </li><li><code>jQuery</code>对象转为DOM对象，因为是<strong>数组对象</strong>，所以用可以<code>get()</code>，或者<code>[]</code>  </li><li>隐式迭代，<code>$(&quot;button&quot;).click()</code></li><li><code>DOM</code>对象转为<code>jQuery</code>对象<ol><li>选取一个DOM对象，<code>document.getElementById(&quot;&quot;)</code></li><li>使用<code>$()</code>进行包装即可</li></ol></li><li>DOM对象不能用jQuery对象的方法，相反jQuery对象也不能使用DOM对象的方法</li><li>在函数内,<code>this</code>代表DOM对象，用<code>$(this)</code>就变成了jQuery对象</li><li><code>jQuery</code>对象是一个<code>DOM</code>数组对象。 </li></ul><h3 id="jQuery选择器-1"><a href="#jQuery选择器-1" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h3><h4 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h4><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>在CSS中</th></tr></thead><tbody><tr><td><code>#id</code></td><td>根据给定的<code>id</code>匹配一个元素</td><td>单个元素组成的集合</td><td>√</td></tr><tr><td><code>.class</code></td><td>根据给定的类名匹配元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>element</code></td><td>根据给定的元素名匹配元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>*</code></td><td>匹配所有元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>select1，select2...selectN</code></td><td>将每一个选择器匹配到的元素一起返回</td><td>集合元素</td><td>√</td></tr></tbody></table><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><ul><li>用<code>[]</code>,例如<code>$(&quot;a[href^=&#39;https://&#39;]&quot;&quot;)</code>选取<code>a</code>标签的<code>href</code>属性为<code>https://</code>开头的元素；<code>$(&quot;form[method]&quot;)</code>选取<code>form</code>标签含有<code>method</code>属性的元素；<code>[[href^=&#39;https://&#39;]]</code>默认使用<code>*</code>是一种隐式假定,选取所有<code>href</code>属性是<code>https://</code>开头的元素。</li></ul><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>在CSS中</th></tr></thead><tbody><tr><td><code>E[A]</code></td><td>匹配所有标签名为<code>E</code>，具有属性<code>A</code>的元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>E[A=&#39;V&#39;]</code></td><td>匹配所有标签名为<code>E</code>，具有属性<code>A</code>，且<code>A</code>的值为<code>V</code>的所有元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>E[A^=&#39;V&#39;]</code></td><td>匹配所有标签名为<code>E</code>，具有属性A，且<code>A</code>的值以<code>V</code>开头的元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>E[A&lt;code&gt;&amp;#124;=&lt;/code&gt;&#39;V&#39;</code></td><td>匹配所有标签名为<code>E</code>，具有属性<code>A</code>，且<code>A</code>的值等于<code>V</code>或者以<code>V-</code>开头的所有元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>E[A$=&#39;V&#39;]</code></td><td>匹配所有标签名为<code>E</code>，具有属性<code>A</code>，且<code>A</code>的值以<code>V</code>结束的所有元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>E[A!=&#39;V&#39;]</code></td><td>匹配所有标签名为<code>E</code>，具有属性<code>A</code>，且<code>A</code>的值不等于<code>V</code>的所有元素，或者完全不具备属性<code>A</code></td><td>集合元素</td><td>×</td></tr><tr><td><code>E[A~=&#39;V&#39;]</code></td><td>匹配所有标签名为<code>E</code>，具有属性<code>A</code>，且<code>A</code>的值等于<code>V</code>或者包含<code>V</code>的所有元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>E[C1][C2]</code></td><td>匹配所有标签名为<code>E</code>，具有属性<code>A</code>，且<code>A</code>的值满足条件的<code>C1</code>和<code>C2</code>的所有元素</td><td>集合元素</td><td>√</td></tr></tbody></table><h4 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h4><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>在CSS中</th></tr></thead><tbody><tr><td><code>${&quot;ancestor descendant&quot;}</code></td><td>选取<code>ancestor</code>的所有<code>descendant</code>(后代)元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>${&quot;parent &gt; child&quot;}</code></td><td>选取<code>parent</code>元素下的<code>child</code>(子)元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>${&quot;prev + next&quot;}</code></td><td>选取紧接在<code>prev</code>元素后的下一个<code>next</code>元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>${&quot;prev ~ siblings&quot;}</code></td><td>选取<code>prev</code>元素后的所有<code>siblings</code>元素(只能是后面的同辈元素)</td><td>集合元素</td><td>√</td></tr></tbody></table><ul><li>方法<code>siblings()</code>能选择前后同辈的元素，<code>${&quot;#but1&quot;}.siblings(&quot;div&quot;)</code>选取id是but1的同辈的div元素 </li></ul><h4 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h4><h5 id="位置过滤选择器"><a href="#位置过滤选择器" class="headerlink" title="位置过滤选择器"></a>位置过滤选择器</h5><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>在CSS中</th></tr></thead><tbody><tr><td><code>:first</code></td><td>选取第一个元素。<code>li a:first</code> 返回列表元素中的第一个a标签</td><td>单个元素组成的集合</td><td>×</td></tr><tr><td><code>:last</code></td><td>选取最后一个元素。<code>li a:last</code> 返回列表元素中的最后一个a标签</td><td>集合元素</td><td>×</td></tr><tr><td><code>:not(selector)</code></td><td>去除所有与给定选择器匹配的元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>:even</code></td><td>选取索引是偶数的所有元素，索引从0开始。<code>li:even</code> 返回偶数索引元素</td><td>集合元素</td><td>×</td></tr><tr><td><code>:odd</code></td><td>选取索引是奇数的所有元素，索引从0开始。<code>li:odd</code> 返回奇数索引元素</td><td>集合元素</td><td>×</td></tr><tr><td><code>:eq(index)</code></td><td>选取索引等于<code>index</code>的元素，索引从0开始</td><td>集合元素</td><td>×</td></tr><tr><td><code>:gt(index)</code></td><td>选取索引大于<code>index</code>的元素，索引从0开始</td><td>集合元素</td><td>×</td></tr><tr><td><code>:lt(index)</code></td><td>选取索引小于<code>index</code>的元素，索引从0开始</td><td>集合元素</td><td>×</td></tr><tr><td><code>:header</code></td><td>选取所有得标题元素，如：<code>h1</code>，<code>h2</code>等</td><td>集合元素</td><td>×</td></tr><tr><td><code>:animated</code></td><td>选取当前正在执行动画的所有元素</td><td>集合元素</td><td>×</td></tr></tbody></table><h5 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h5><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>在CSS中</th></tr></thead><tbody><tr><td><code>:contains(text)</code></td><td>选取含有文本内容为text的元素</td><td>集合元素</td><td>×</td></tr><tr><td><code>:empty</code></td><td>选取不包含子元素或者文本的空元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>:has(selector)</code></td><td>选取含有选择器所匹配的元素的元素</td><td>集合元素</td><td>×</td></tr><tr><td><code>:parent</code></td><td>选取含有子元素或者文本的元素</td><td>集合元素</td><td>×</td></tr></tbody></table><h5 id="可见性过滤选择器"><a href="#可见性过滤选择器" class="headerlink" title="可见性过滤选择器"></a>可见性过滤选择器</h5><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>在CSS中</th></tr></thead><tbody><tr><td><code>:hidden</code></td><td>选取所有不可见的元素</td><td>集合元素</td><td>×</td></tr><tr><td><code>:visible</code></td><td>选取所有可见的元素</td><td>集合元素</td><td>×</td></tr></tbody></table><ul><li><code>:hidden</code>不仅包含样式属性<code>display</code>为<code>none</code>的元素，也包含文本隐藏域<code>(&lt;input type=&quot;hidden&quot; name=&quot;&quot;&gt;)</code>和<code>visible:hidden</code>之类的元素  </li></ul><h5 id="子元素过滤选择器"><a href="#子元素过滤选择器" class="headerlink" title="子元素过滤选择器"></a>子元素过滤选择器</h5><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>在CSS中</th></tr></thead><tbody><tr><td><code>:first-child</code></td><td>匹配上下文中第一个子元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>:last-child</code></td><td>匹配上下文中最后一个子元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>:first-of-type</code></td><td>匹配给定类型的第一个子元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>:last-of-type</code></td><td>匹配给定类型的最后一个子元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>:nth-child(n)</code></td><td>匹配第n个子元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>:nth-child(even&amp;#124;odd)</code></td><td>匹配偶数或奇数</td><td>集合元素</td><td></td></tr><tr><td><code>:nth-child(Xn+Y)</code></td><td>匹配给定公式计算的第<code>n</code>个子元素，索引从1开始</td><td>集合元素</td><td></td></tr><tr><td><code>:nth-last-child(n)</code></td><td>匹配倒数第<code>n</code>个子元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>:nth-last-child(even&amp;#124;odd)</code></td><td>匹配偶数或奇数</td><td>集合元素</td><td></td></tr><tr><td><code>:nth-last-child(Xn+Y)</code></td><td>匹配给定公式计算的倒数第<code>n</code>个子元素</td><td>集合元素</td><td></td></tr><tr><td><code>:only-child</code></td><td>只匹配没有兄弟元素的子元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>:only-of-type</code></td><td>只匹配没有相同类型的兄弟元素的子元素</td><td>集合元素</td><td>√</td></tr></tbody></table><p>选取子元素需要添加空格</p><h5 id="表单过滤器"><a href="#表单过滤器" class="headerlink" title="表单过滤器"></a>表单过滤器</h5><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>在CSS中</th></tr></thead><tbody><tr><td><code>:checkbox</code></td><td>只选择复选框元素(<code>input[type=checkbox]</code>)</td><td>集合元素</td><td>×</td></tr><tr><td><code>:checked</code></td><td>只选择状态处于被选中的元素，复选框、单选框或者下拉框元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>:disabled</code></td><td>只选择禁用状态的元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>:enabled</code></td><td>只选择启动状态的元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>:file</code></td><td>只选择文件input元素(<code>input[type=file]</code>)</td><td>集合元素</td><td>×</td></tr><tr><td><code>:focus</code></td><td>只选择处于聚焦状态的元素</td><td>集合元素</td><td>√</td></tr><tr><td><code>:image</code></td><td>只选择图片input元素(<code>input[type=image]</code>)</td><td>集合元素</td><td>×</td></tr><tr><td><code>:input</code></td><td>只选择表单元素(<code>input、select、textarea、button</code>)</td><td>集合元素</td><td>×</td></tr><tr><td><code>:password</code></td><td>只选择密码元素(<code>input[type=password]</code>)</td><td>集合元素</td><td>×</td></tr><tr><td><code>:radio</code></td><td>只选择单选元素(<code>input[type=radio]</code>)</td><td>集合元素</td><td>×</td></tr><tr><td><code>:reset</code></td><td>只选择重置按钮(<code>input[type=reset])或button[type=reset]</code>)</td><td>集合元素</td><td>×</td></tr><tr><td><code>:selected</code></td><td>只选择处于选中状态的列表元素</td><td>集合元素</td><td>×</td></tr><tr><td><code>:submit</code></td><td>只选择提交按钮(<code>button[type=submit]</code>)或者(<code>input[type=submit]</code>)</td><td>集合元素</td><td>×</td></tr><tr><td><code>:text</code></td><td>只选择文本元素(<code>input[type=text]</code>)或者没有指定类型的元素(因为默认是<code>type=text</code>)</td><td>集合元素</td><td>×</td></tr></tbody></table><h5 id="其他过滤器"><a href="#其他过滤器" class="headerlink" title="其他过滤器"></a>其他过滤器</h5><table><thead><tr><th>选择器</th><th>描述</th><th>在CSS中</th></tr></thead><tbody><tr><td><code>:animated</code></td><td>只选择动画模式的元素</td><td>×</td></tr><tr><td><code>:header</code></td><td>只选择头元属：<code>&lt;h1&gt;</code>到<code>&lt;h5&gt;</code></td><td>×</td></tr><tr><td><code>:lang(language)</code></td><td>只选择采用特定语言的元素</td><td>√</td></tr><tr><td><code>:root</code></td><td>选择文档的根元素</td><td>√</td></tr><tr><td><code>:target</code></td><td>通过文档的<code>URL</code>框架标识来选择目标元素</td><td>√</td></tr></tbody></table><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td><code>click(function(){})</code></td><td>鼠标点击</td></tr></tbody></table><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>css()</code></td><td>设置样式</td></tr><tr><td><code>siblings(selector)</code></td><td>选择前后同辈的元素</td></tr><tr><td><code>nextAll(selector)</code></td><td>下面所有的元素</td></tr><tr><td><code>prevAll(selector)</code></td><td>前面的所有元素</td></tr><tr><td><code>show(time)</code></td><td>显示出来</td></tr><tr><td><code>attr()</code></td><td>获取属性值(一个参数)或设置属性值(两个参数)</td></tr><tr><td><code>val()</code></td><td>获取或设置表单元素的<code>value</code>属性值</td></tr><tr><td><code>each()</code></td><td>遍历，在each内部的this是正在得到的DOM对象，而不是一个jQuery对象</td></tr><tr><td><code>text()</code></td><td>获取或设置元素节点的文本子节点的值</td></tr></tbody></table><ul><li>jQuery的很多方法支持方法的连缀，即一个方法的返回值还是调用该方法的jQuery对象，还可以继续调用该对象的其他方法    </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jQuery选择器&quot;&gt;&lt;a href=&quot;#jQuery选择器&quot; class=&quot;headerlink&quot; title=&quot;jQuery选择器&quot;&gt;&lt;/a&gt;jQuery选择器&lt;/h1&gt;&lt;h2 id=&quot;helloworld&quot;&gt;&lt;a href=&quot;#helloworld&quot; cla
      
    
    </summary>
    
      <category term="jquery" scheme="http://missers.github.io/categories/jquery/"/>
    
    
      <category term="jquery" scheme="http://missers.github.io/tags/jquery/"/>
    
      <category term="Dom" scheme="http://missers.github.io/tags/Dom/"/>
    
      <category term="选择器" scheme="http://missers.github.io/tags/%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>二、操作jQuery集合</title>
    <link href="http://missers.github.io/2017/12/29/1/"/>
    <id>http://missers.github.io/2017/12/29/1/</id>
    <published>2017-12-29T14:12:47.000Z</published>
    <updated>2017-12-29T14:25:51.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作jQuery集合"><a href="#操作jQuery集合" class="headerlink" title="操作jQuery集合"></a>操作jQuery集合</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在通过<code>jQuery</code>选择器获取到jQuery集合后，我们也许会想更加细致的划分集合，或者只要其中的单个元素，这时候就需要我们来用<code>jQuery</code>的函数对集合进行操作了。</p></blockquote><h2 id="创建新HTML元素"><a href="#创建新HTML元素" class="headerlink" title="创建新HTML元素"></a>创建新HTML元素</h2><p>一种典型的情况是：当需要从部获取数据时，使用Ajax后，返回的数据是JSON或者XML格式，需要我们显示为一个表格。</p><p><code>$(&#39;html&#39;)</code>创建基础的html元素  </p><ul><li><code>$(&#39;&lt;div&gt;&#39;)</code>等价于<code>$(&#39;&lt;div/&gt;&#39;)和$(&#39;&lt;div&gt;&lt;/div&gt;&#39;)</code><br><code>$(&#39;html&#39;, content)</code>创建带有属性或事件的元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'&lt;img&gt;'</span>, &#123;</span><br><span class="line">    src:<span class="string">'imges/little.bear.png'</span>,</span><br><span class="line">    alt:<span class="string">'Little Bear'</span>,</span><br><span class="line">    title:<span class="string">'hello Bear'</span>,</span><br><span class="line">    click:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert($(<span class="keyword">this</span>).attr(<span class="string">'title'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).appendTo(<span class="string">'body'</span>);</span><br></pre></td></tr></table></figure><h2 id="管理jQuery集合"><a href="#管理jQuery集合" class="headerlink" title="管理jQuery集合"></a>管理jQuery集合</h2><h3 id="确定集合的大小"><a href="#确定集合的大小" class="headerlink" title="确定集合的大小"></a>确定集合的大小</h3><p><code>jQuery</code>提供了<code>length</code>属性，例如<code>$(&#39;p&#39;).length</code></p><h3 id="从集合获取元素"><a href="#从集合获取元素" class="headerlink" title="从集合获取元素"></a>从集合获取元素</h3><p>有时需要直接访问元素或者执行原生的<code>JavaScript</code>的操作</p><ul><li><code>get(index)</code>,返回一个<code>DOM</code>元素，或者一个<code>DOM</code>元素数组<br>有时我们想获取一个指定元素的<code>jQuery</code>对象，而不是原始元素，可以用<code>$($(&#39;p&#39;).get(2))</code>,看起来有点奇怪，为此jQuery提供了eq()方法</li></ul><table><thead><tr><th>方法</th><th>描述</th><th>返回</th></tr></thead><tbody><tr><td><code>eq(index)</code></td><td>获取指定索引的元素</td><td>包含结果的<code>jQuery</code>集合</td></tr><tr><td><code>first()</code></td><td>获取集合中的第一个元素</td><td>包含结果的<code>jQuery</code>集合</td></tr><tr><td><code>last()</code></td><td>获取集合中的最后一个元素</td><td>包含结果的<code>jQuery</code>集合</td></tr><tr><td><code>toArray()</code></td><td>作为数组返回<code>DOM</code>元素的集合</td><td>以js数组的形式返回集合中的<code>DOM</code>元素</td></tr><tr><td><code>index(element)</code></td><td>反向操作确定集合中元素的索引值</td><td>集合中元素的索引值，没有找到，返回<code>-1</code></td></tr><tr><td><code>index()</code></td><td>无参的，可以查找父节点中元素的索引(兄弟节点)</td><td>其在兄弟节点中的索引</td></tr></tbody></table><p><code>index()</code>无参的:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span> = <span class="string">"main-menu"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span> =<span class="string">"home-link"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>sss<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span> = <span class="string">"pro-link"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>www<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span> = <span class="string">"blog-link"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">var index = $('#blog-link').index();//结果是2</span><br></pre></td></tr></table></figure><h3 id="使用关系获取集合"><a href="#使用关系获取集合" class="headerlink" title="使用关系获取集合"></a>使用关系获取集合</h3><p><code>jQuery</code>允许根据<code>DOM</code>元素之间的层级关系获取新的集合</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>parents([selector])</code></td><td>以集合形式返回集合中所有元素的唯一祖先，结果既有直接父节点也有其他高级节点，如果设置选择器，则返回匹配的祖先节点</td></tr><tr><td><code>parent([selector])</code></td><td>返回集合中所有元素的直接父节点元素，结果以集合形式返回，如果设置选择器，则返回匹配的祖先节点</td></tr><tr><td><code>find(selector)</code></td><td>返回集合中每个元素的子节点作为一个集合</td></tr><tr><td><code>nextUtil([selector[,filter]])</code></td><td>返回指定元素的兄弟元素，但不包括匹配选择器的元素</td></tr><tr><td><code>prev([selector])</code></td><td>返回匹配元素的的直接前兄弟节点的集合，如果设置选择器，则只会选择匹配的前兄弟节点元素</td></tr><tr><td><code>children([selector])</code></td><td>返回集合中元素的所有子元素，过滤选择器的参数可选</td></tr><tr><td><code>closest([selector])</code></td><td>返回包含匹配指定选择器的每个元素最近上级节点的集合</td></tr><tr><td><code>siblings([selector])</code></td><td>以集合形式返回集合中元素的兄弟节点，元素可以被选择器过滤</td></tr></tbody></table><h3 id="分割集合"><a href="#分割集合" class="headerlink" title="分割集合"></a>分割集合</h3><p>一旦有了集合，那么或许想通过添加或者删除来调整集合中的元素，那么就需要分割集合</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>add(selector)</code></td><td>创建<code>jQuery</code>对象，并且添加<code>selector</code>到指定元素到集合中，参数可以是多种</td></tr><tr><td><code>addClass()</code></td><td>接收一个样式名作为参数，然后把样式添加给集合中的元素</td></tr><tr><td><code>not(selector)</code></td><td>创建不包含选择器参数匹配元素的新集合，如果传递的是函数，那么会根据每个元素来执行函数，如果返回<code>true</code>删除元素</td></tr><tr><td><code>filter(selector)</code></td><td>和<code>not()</code>类似，只不过当不匹配时会删除元素，也就是返回<code>false</code>删除元素</td></tr><tr><td><code>slice(start[,end])</code></td><td>创建并返回匹配集合中部分元素的新集合</td></tr><tr><td><code>has(selector)</code></td><td>创建并返回新的集合，只包含匹配<code>selector</code>选择器的子元素</td></tr><tr><td><code>map(callback)</code></td><td>在集合中的每个元素上调用<code>callback</code>函数，返回到一个<code>jQuery</code>对象中</td></tr><tr><td><code>each(iterator)</code></td><td>遍历集合中的每个元素，然后为每个元素调入传入的迭代器函数</td></tr></tbody></table><p><code>map()</code>:查询包含所有ID的<code>jQuery</code>对象，返回<code>js</code>数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $allIds = $(<span class="string">'div'</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.id;</span><br><span class="line">&#125;).toArray();</span><br></pre></td></tr></table></figure><p><code>each()</code>:为匹配集合中的每一个元素设置一个属性值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'img'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.alt = <span class="string">'this is image['</span>+ i +<span class="string">']with an id of'</span> + <span class="keyword">this</span>.id</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="集合的其他方法"><a href="#集合的其他方法" class="headerlink" title="集合的其他方法"></a>集合的其他方法</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>is(selector)</code></td><td>确定集合中是否有元素匹配给定的选择器，包含返回<code>true</code>，不包含返回<code>false</code></td></tr><tr><td><code>end()</code></td><td>在链式调用中使用该方法，可以将匹配的集合返回到之前的状态</td></tr><tr><td><code>addBack([selector])</code></td><td>把栈上前一个集合的元属添加到当前集合里，可以选择性提供选择器参数</td></tr></tbody></table><ul><li><code>jQuery</code>对象维护了一个内部栈来保存针对匹配元素集合的修改。</li><li>调用<code>end()</code>方法，顶部的集合就会弹出，流出前一个集合来操作后续方法</li><li>调用<code>addBack()</code>方法，他会把栈上前一个集合的元属添加到当前集合里，可以选择性提供选择器参数，会创建一个新的集合</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;操作jQuery集合&quot;&gt;&lt;a href=&quot;#操作jQuery集合&quot; class=&quot;headerlink&quot; title=&quot;操作jQuery集合&quot;&gt;&lt;/a&gt;操作jQuery集合&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="jquery" scheme="http://missers.github.io/categories/jquery/"/>
    
    
      <category term="jquery" scheme="http://missers.github.io/tags/jquery/"/>
    
      <category term="集合" scheme="http://missers.github.io/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
</feed>
